# -*- coding: utf-8 -*-
"""Untitled44.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_YHSG6IbKPL_eL5wx_yrTHMzl34AVFaK
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Load datasets
train_df = pd.read_csv("training_data.csv")
test_df = pd.read_csv("test_data.csv")

# Assume last column is target
target_col = train_df.columns[-1]
X = train_df.drop(target_col, axis=1)
y = train_df[target_col]

# Encode target labels
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# ðŸ”„ Convert all symptom features to numeric (label encoding or binary)
X_encoded = X.apply(lambda col: LabelEncoder().fit_transform(col.astype(str)))

# Train model
model = RandomForestClassifier()
model.fit(X_encoded, y_encoded)

import streamlit as st

# ðŸ§  App UI
st.title("ðŸ©º Mini Dr. AI - Smart Symptom Checker")

st.markdown("#### Select Your Symptoms:")
symptom_cols = X.columns.tolist()

selected = st.multiselect("Choose symptoms you're experiencing:", symptom_cols)

# Prepare input vector
input_vector = [1 if s in selected else 0 for s in symptom_cols]
input_df = pd.DataFrame([input_vector], columns=symptom_cols)

# Make sure input matches encoded feature structure
input_encoded = input_df.reindex(columns=X_encoded.columns, fill_value=0)

if st.button("Diagnose Me"):
    prediction = model.predict(input_encoded)[0]
    disease = le.inverse_transform([prediction])[0]

    st.success(f"ðŸ§¾ You may have: **{disease}**")

    # Optional basic advice
    st.info("ðŸ’¡ Suggestion: Please consult a medical professional for confirmation.")